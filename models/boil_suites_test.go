// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Channels", testChannels)
	t.Run("FollowedChannels", testFollowedChannels)
	t.Run("Listeners", testListeners)
}

func TestDelete(t *testing.T) {
	t.Run("Channels", testChannelsDelete)
	t.Run("FollowedChannels", testFollowedChannelsDelete)
	t.Run("Listeners", testListenersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Channels", testChannelsQueryDeleteAll)
	t.Run("FollowedChannels", testFollowedChannelsQueryDeleteAll)
	t.Run("Listeners", testListenersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Channels", testChannelsSliceDeleteAll)
	t.Run("FollowedChannels", testFollowedChannelsSliceDeleteAll)
	t.Run("Listeners", testListenersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Channels", testChannelsExists)
	t.Run("FollowedChannels", testFollowedChannelsExists)
	t.Run("Listeners", testListenersExists)
}

func TestFind(t *testing.T) {
	t.Run("Channels", testChannelsFind)
	t.Run("FollowedChannels", testFollowedChannelsFind)
	t.Run("Listeners", testListenersFind)
}

func TestBind(t *testing.T) {
	t.Run("Channels", testChannelsBind)
	t.Run("FollowedChannels", testFollowedChannelsBind)
	t.Run("Listeners", testListenersBind)
}

func TestOne(t *testing.T) {
	t.Run("Channels", testChannelsOne)
	t.Run("FollowedChannels", testFollowedChannelsOne)
	t.Run("Listeners", testListenersOne)
}

func TestAll(t *testing.T) {
	t.Run("Channels", testChannelsAll)
	t.Run("FollowedChannels", testFollowedChannelsAll)
	t.Run("Listeners", testListenersAll)
}

func TestCount(t *testing.T) {
	t.Run("Channels", testChannelsCount)
	t.Run("FollowedChannels", testFollowedChannelsCount)
	t.Run("Listeners", testListenersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Channels", testChannelsHooks)
	t.Run("FollowedChannels", testFollowedChannelsHooks)
	t.Run("Listeners", testListenersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Channels", testChannelsInsert)
	t.Run("Channels", testChannelsInsertWhitelist)
	t.Run("FollowedChannels", testFollowedChannelsInsert)
	t.Run("FollowedChannels", testFollowedChannelsInsertWhitelist)
	t.Run("Listeners", testListenersInsert)
	t.Run("Listeners", testListenersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("FollowedChannelToChannelUsingChannel", testFollowedChannelToOneChannelUsingChannel)
	t.Run("FollowedChannelToListenerUsingListener", testFollowedChannelToOneListenerUsingListener)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ChannelToFollowedChannels", testChannelToManyFollowedChannels)
	t.Run("ListenerToFollowedChannels", testListenerToManyFollowedChannels)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("FollowedChannelToChannelUsingFollowedChannels", testFollowedChannelToOneSetOpChannelUsingChannel)
	t.Run("FollowedChannelToListenerUsingFollowedChannels", testFollowedChannelToOneSetOpListenerUsingListener)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ChannelToFollowedChannels", testChannelToManyAddOpFollowedChannels)
	t.Run("ListenerToFollowedChannels", testListenerToManyAddOpFollowedChannels)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Channels", testChannelsReload)
	t.Run("FollowedChannels", testFollowedChannelsReload)
	t.Run("Listeners", testListenersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Channels", testChannelsReloadAll)
	t.Run("FollowedChannels", testFollowedChannelsReloadAll)
	t.Run("Listeners", testListenersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Channels", testChannelsSelect)
	t.Run("FollowedChannels", testFollowedChannelsSelect)
	t.Run("Listeners", testListenersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Channels", testChannelsUpdate)
	t.Run("FollowedChannels", testFollowedChannelsUpdate)
	t.Run("Listeners", testListenersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Channels", testChannelsSliceUpdateAll)
	t.Run("FollowedChannels", testFollowedChannelsSliceUpdateAll)
	t.Run("Listeners", testListenersSliceUpdateAll)
}
