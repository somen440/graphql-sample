// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFollowedChannels(t *testing.T) {
	t.Parallel()

	query := FollowedChannels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFollowedChannelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FollowedChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFollowedChannelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FollowedChannels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FollowedChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFollowedChannelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FollowedChannelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FollowedChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFollowedChannelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FollowedChannelExists(ctx, tx, o.FollowedChannelID)
	if err != nil {
		t.Errorf("Unable to check if FollowedChannel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FollowedChannelExists to return true, but got false.")
	}
}

func testFollowedChannelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	followedChannelFound, err := FindFollowedChannel(ctx, tx, o.FollowedChannelID)
	if err != nil {
		t.Error(err)
	}

	if followedChannelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFollowedChannelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FollowedChannels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFollowedChannelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FollowedChannels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFollowedChannelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	followedChannelOne := &FollowedChannel{}
	followedChannelTwo := &FollowedChannel{}
	if err = randomize.Struct(seed, followedChannelOne, followedChannelDBTypes, false, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}
	if err = randomize.Struct(seed, followedChannelTwo, followedChannelDBTypes, false, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = followedChannelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = followedChannelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FollowedChannels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFollowedChannelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	followedChannelOne := &FollowedChannel{}
	followedChannelTwo := &FollowedChannel{}
	if err = randomize.Struct(seed, followedChannelOne, followedChannelDBTypes, false, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}
	if err = randomize.Struct(seed, followedChannelTwo, followedChannelDBTypes, false, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = followedChannelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = followedChannelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FollowedChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func followedChannelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FollowedChannel) error {
	*o = FollowedChannel{}
	return nil
}

func followedChannelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FollowedChannel) error {
	*o = FollowedChannel{}
	return nil
}

func followedChannelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FollowedChannel) error {
	*o = FollowedChannel{}
	return nil
}

func followedChannelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FollowedChannel) error {
	*o = FollowedChannel{}
	return nil
}

func followedChannelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FollowedChannel) error {
	*o = FollowedChannel{}
	return nil
}

func followedChannelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FollowedChannel) error {
	*o = FollowedChannel{}
	return nil
}

func followedChannelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FollowedChannel) error {
	*o = FollowedChannel{}
	return nil
}

func followedChannelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FollowedChannel) error {
	*o = FollowedChannel{}
	return nil
}

func followedChannelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FollowedChannel) error {
	*o = FollowedChannel{}
	return nil
}

func testFollowedChannelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FollowedChannel{}
	o := &FollowedChannel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, followedChannelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FollowedChannel object: %s", err)
	}

	AddFollowedChannelHook(boil.BeforeInsertHook, followedChannelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	followedChannelBeforeInsertHooks = []FollowedChannelHook{}

	AddFollowedChannelHook(boil.AfterInsertHook, followedChannelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	followedChannelAfterInsertHooks = []FollowedChannelHook{}

	AddFollowedChannelHook(boil.AfterSelectHook, followedChannelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	followedChannelAfterSelectHooks = []FollowedChannelHook{}

	AddFollowedChannelHook(boil.BeforeUpdateHook, followedChannelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	followedChannelBeforeUpdateHooks = []FollowedChannelHook{}

	AddFollowedChannelHook(boil.AfterUpdateHook, followedChannelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	followedChannelAfterUpdateHooks = []FollowedChannelHook{}

	AddFollowedChannelHook(boil.BeforeDeleteHook, followedChannelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	followedChannelBeforeDeleteHooks = []FollowedChannelHook{}

	AddFollowedChannelHook(boil.AfterDeleteHook, followedChannelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	followedChannelAfterDeleteHooks = []FollowedChannelHook{}

	AddFollowedChannelHook(boil.BeforeUpsertHook, followedChannelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	followedChannelBeforeUpsertHooks = []FollowedChannelHook{}

	AddFollowedChannelHook(boil.AfterUpsertHook, followedChannelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	followedChannelAfterUpsertHooks = []FollowedChannelHook{}
}

func testFollowedChannelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FollowedChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFollowedChannelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(followedChannelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FollowedChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFollowedChannelToOneChannelUsingChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FollowedChannel
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, followedChannelDBTypes, false, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChannelID = foreign.ChannelID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Channel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ChannelID != foreign.ChannelID {
		t.Errorf("want: %v, got %v", foreign.ChannelID, check.ChannelID)
	}

	slice := FollowedChannelSlice{&local}
	if err = local.L.LoadChannel(ctx, tx, false, (*[]*FollowedChannel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Channel = nil
	if err = local.L.LoadChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFollowedChannelToOneListenerUsingListener(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FollowedChannel
	var foreign Listener

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, followedChannelDBTypes, false, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, listenerDBTypes, false, listenerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Listener struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ListenerID = foreign.ListenerID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Listener().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ListenerID != foreign.ListenerID {
		t.Errorf("want: %v, got %v", foreign.ListenerID, check.ListenerID)
	}

	slice := FollowedChannelSlice{&local}
	if err = local.L.LoadListener(ctx, tx, false, (*[]*FollowedChannel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Listener == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Listener = nil
	if err = local.L.LoadListener(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Listener == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFollowedChannelToOneSetOpChannelUsingChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FollowedChannel
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, followedChannelDBTypes, false, strmangle.SetComplement(followedChannelPrimaryKeyColumns, followedChannelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Channel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FollowedChannels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChannelID != x.ChannelID {
			t.Error("foreign key was wrong value", a.ChannelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChannelID))
		reflect.Indirect(reflect.ValueOf(&a.ChannelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ChannelID != x.ChannelID {
			t.Error("foreign key was wrong value", a.ChannelID, x.ChannelID)
		}
	}
}
func testFollowedChannelToOneSetOpListenerUsingListener(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FollowedChannel
	var b, c Listener

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, followedChannelDBTypes, false, strmangle.SetComplement(followedChannelPrimaryKeyColumns, followedChannelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, listenerDBTypes, false, strmangle.SetComplement(listenerPrimaryKeyColumns, listenerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, listenerDBTypes, false, strmangle.SetComplement(listenerPrimaryKeyColumns, listenerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Listener{&b, &c} {
		err = a.SetListener(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Listener != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FollowedChannels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ListenerID != x.ListenerID {
			t.Error("foreign key was wrong value", a.ListenerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ListenerID))
		reflect.Indirect(reflect.ValueOf(&a.ListenerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ListenerID != x.ListenerID {
			t.Error("foreign key was wrong value", a.ListenerID, x.ListenerID)
		}
	}
}

func testFollowedChannelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFollowedChannelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FollowedChannelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFollowedChannelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FollowedChannels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	followedChannelDBTypes = map[string]string{`FollowedChannelID`: `int`, `ListenerID`: `varchar`, `ChannelID`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                      = bytes.MinRead
)

func testFollowedChannelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(followedChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(followedChannelAllColumns) == len(followedChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FollowedChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFollowedChannelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(followedChannelAllColumns) == len(followedChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FollowedChannel{}
	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FollowedChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, followedChannelDBTypes, true, followedChannelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(followedChannelAllColumns, followedChannelPrimaryKeyColumns) {
		fields = followedChannelAllColumns
	} else {
		fields = strmangle.SetComplement(
			followedChannelAllColumns,
			followedChannelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FollowedChannelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFollowedChannelsUpsert(t *testing.T) {
	t.Parallel()

	if len(followedChannelAllColumns) == len(followedChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFollowedChannelUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FollowedChannel{}
	if err = randomize.Struct(seed, &o, followedChannelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FollowedChannel: %s", err)
	}

	count, err := FollowedChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, followedChannelDBTypes, false, followedChannelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FollowedChannel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FollowedChannel: %s", err)
	}

	count, err = FollowedChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
