// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Listener is an object representing the database table.
type Listener struct {
	ListenerID string    `boil:"listener_id" json:"listener_id" toml:"listener_id" yaml:"listener_id"`
	Name       string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *listenerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L listenerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ListenerColumns = struct {
	ListenerID string
	Name       string
	CreatedAt  string
	UpdatedAt  string
}{
	ListenerID: "listener_id",
	Name:       "name",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

// Generated where

var ListenerWhere = struct {
	ListenerID whereHelperstring
	Name       whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ListenerID: whereHelperstring{field: "`listeners`.`listener_id`"},
	Name:       whereHelperstring{field: "`listeners`.`name`"},
	CreatedAt:  whereHelpertime_Time{field: "`listeners`.`created_at`"},
	UpdatedAt:  whereHelpertime_Time{field: "`listeners`.`updated_at`"},
}

// ListenerRels is where relationship names are stored.
var ListenerRels = struct {
	FollowedChannels string
}{
	FollowedChannels: "FollowedChannels",
}

// listenerR is where relationships are stored.
type listenerR struct {
	FollowedChannels FollowedChannelSlice
}

// NewStruct creates a new relationship struct
func (*listenerR) NewStruct() *listenerR {
	return &listenerR{}
}

// listenerL is where Load methods for each relationship are stored.
type listenerL struct{}

var (
	listenerAllColumns            = []string{"listener_id", "name", "created_at", "updated_at"}
	listenerColumnsWithoutDefault = []string{"listener_id", "name"}
	listenerColumnsWithDefault    = []string{"created_at", "updated_at"}
	listenerPrimaryKeyColumns     = []string{"listener_id"}
)

type (
	// ListenerSlice is an alias for a slice of pointers to Listener.
	// This should generally be used opposed to []Listener.
	ListenerSlice []*Listener
	// ListenerHook is the signature for custom Listener hook methods
	ListenerHook func(context.Context, boil.ContextExecutor, *Listener) error

	listenerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	listenerType                 = reflect.TypeOf(&Listener{})
	listenerMapping              = queries.MakeStructMapping(listenerType)
	listenerPrimaryKeyMapping, _ = queries.BindMapping(listenerType, listenerMapping, listenerPrimaryKeyColumns)
	listenerInsertCacheMut       sync.RWMutex
	listenerInsertCache          = make(map[string]insertCache)
	listenerUpdateCacheMut       sync.RWMutex
	listenerUpdateCache          = make(map[string]updateCache)
	listenerUpsertCacheMut       sync.RWMutex
	listenerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var listenerBeforeInsertHooks []ListenerHook
var listenerBeforeUpdateHooks []ListenerHook
var listenerBeforeDeleteHooks []ListenerHook
var listenerBeforeUpsertHooks []ListenerHook

var listenerAfterInsertHooks []ListenerHook
var listenerAfterSelectHooks []ListenerHook
var listenerAfterUpdateHooks []ListenerHook
var listenerAfterDeleteHooks []ListenerHook
var listenerAfterUpsertHooks []ListenerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Listener) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listenerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Listener) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listenerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Listener) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listenerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Listener) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listenerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Listener) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listenerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Listener) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listenerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Listener) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listenerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Listener) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listenerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Listener) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listenerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddListenerHook registers your hook function for all future operations.
func AddListenerHook(hookPoint boil.HookPoint, listenerHook ListenerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		listenerBeforeInsertHooks = append(listenerBeforeInsertHooks, listenerHook)
	case boil.BeforeUpdateHook:
		listenerBeforeUpdateHooks = append(listenerBeforeUpdateHooks, listenerHook)
	case boil.BeforeDeleteHook:
		listenerBeforeDeleteHooks = append(listenerBeforeDeleteHooks, listenerHook)
	case boil.BeforeUpsertHook:
		listenerBeforeUpsertHooks = append(listenerBeforeUpsertHooks, listenerHook)
	case boil.AfterInsertHook:
		listenerAfterInsertHooks = append(listenerAfterInsertHooks, listenerHook)
	case boil.AfterSelectHook:
		listenerAfterSelectHooks = append(listenerAfterSelectHooks, listenerHook)
	case boil.AfterUpdateHook:
		listenerAfterUpdateHooks = append(listenerAfterUpdateHooks, listenerHook)
	case boil.AfterDeleteHook:
		listenerAfterDeleteHooks = append(listenerAfterDeleteHooks, listenerHook)
	case boil.AfterUpsertHook:
		listenerAfterUpsertHooks = append(listenerAfterUpsertHooks, listenerHook)
	}
}

// One returns a single listener record from the query.
func (q listenerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Listener, error) {
	o := &Listener{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for listeners")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Listener records from the query.
func (q listenerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ListenerSlice, error) {
	var o []*Listener

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Listener slice")
	}

	if len(listenerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Listener records in the query.
func (q listenerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count listeners rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q listenerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if listeners exists")
	}

	return count > 0, nil
}

// FollowedChannels retrieves all the followed_channel's FollowedChannels with an executor.
func (o *Listener) FollowedChannels(mods ...qm.QueryMod) followedChannelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`followed_channels`.`listener_id`=?", o.ListenerID),
	)

	query := FollowedChannels(queryMods...)
	queries.SetFrom(query.Query, "`followed_channels`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`followed_channels`.*"})
	}

	return query
}

// LoadFollowedChannels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (listenerL) LoadFollowedChannels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeListener interface{}, mods queries.Applicator) error {
	var slice []*Listener
	var object *Listener

	if singular {
		object = maybeListener.(*Listener)
	} else {
		slice = *maybeListener.(*[]*Listener)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &listenerR{}
		}
		args = append(args, object.ListenerID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &listenerR{}
			}

			for _, a := range args {
				if a == obj.ListenerID {
					continue Outer
				}
			}

			args = append(args, obj.ListenerID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`followed_channels`), qm.WhereIn(`followed_channels.listener_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load followed_channels")
	}

	var resultSlice []*FollowedChannel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice followed_channels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on followed_channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for followed_channels")
	}

	if len(followedChannelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FollowedChannels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &followedChannelR{}
			}
			foreign.R.Listener = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ListenerID == foreign.ListenerID {
				local.R.FollowedChannels = append(local.R.FollowedChannels, foreign)
				if foreign.R == nil {
					foreign.R = &followedChannelR{}
				}
				foreign.R.Listener = local
				break
			}
		}
	}

	return nil
}

// AddFollowedChannels adds the given related objects to the existing relationships
// of the listener, optionally inserting them as new records.
// Appends related to o.R.FollowedChannels.
// Sets related.R.Listener appropriately.
func (o *Listener) AddFollowedChannels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FollowedChannel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ListenerID = o.ListenerID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `followed_channels` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"listener_id"}),
				strmangle.WhereClause("`", "`", 0, followedChannelPrimaryKeyColumns),
			)
			values := []interface{}{o.ListenerID, rel.FollowedChannelID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ListenerID = o.ListenerID
		}
	}

	if o.R == nil {
		o.R = &listenerR{
			FollowedChannels: related,
		}
	} else {
		o.R.FollowedChannels = append(o.R.FollowedChannels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &followedChannelR{
				Listener: o,
			}
		} else {
			rel.R.Listener = o
		}
	}
	return nil
}

// Listeners retrieves all the records using an executor.
func Listeners(mods ...qm.QueryMod) listenerQuery {
	mods = append(mods, qm.From("`listeners`"))
	return listenerQuery{NewQuery(mods...)}
}

// FindListener retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindListener(ctx context.Context, exec boil.ContextExecutor, listenerID string, selectCols ...string) (*Listener, error) {
	listenerObj := &Listener{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `listeners` where `listener_id`=?", sel,
	)

	q := queries.Raw(query, listenerID)

	err := q.Bind(ctx, exec, listenerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from listeners")
	}

	return listenerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Listener) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no listeners provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(listenerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	listenerInsertCacheMut.RLock()
	cache, cached := listenerInsertCache[key]
	listenerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			listenerAllColumns,
			listenerColumnsWithDefault,
			listenerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(listenerType, listenerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(listenerType, listenerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `listeners` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `listeners` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `listeners` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, listenerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into listeners")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ListenerID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for listeners")
	}

CacheNoHooks:
	if !cached {
		listenerInsertCacheMut.Lock()
		listenerInsertCache[key] = cache
		listenerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Listener.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Listener) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	listenerUpdateCacheMut.RLock()
	cache, cached := listenerUpdateCache[key]
	listenerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			listenerAllColumns,
			listenerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update listeners, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `listeners` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, listenerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(listenerType, listenerMapping, append(wl, listenerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update listeners row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for listeners")
	}

	if !cached {
		listenerUpdateCacheMut.Lock()
		listenerUpdateCache[key] = cache
		listenerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q listenerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for listeners")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for listeners")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ListenerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listenerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `listeners` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, listenerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in listener slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all listener")
	}
	return rowsAff, nil
}

var mySQLListenerUniqueColumns = []string{
	"listener_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Listener) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no listeners provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(listenerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLListenerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	listenerUpsertCacheMut.RLock()
	cache, cached := listenerUpsertCache[key]
	listenerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			listenerAllColumns,
			listenerColumnsWithDefault,
			listenerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			listenerAllColumns,
			listenerPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert listeners, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "listeners", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `listeners` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(listenerType, listenerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(listenerType, listenerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for listeners")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(listenerType, listenerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for listeners")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for listeners")
	}

CacheNoHooks:
	if !cached {
		listenerUpsertCacheMut.Lock()
		listenerUpsertCache[key] = cache
		listenerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Listener record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Listener) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Listener provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), listenerPrimaryKeyMapping)
	sql := "DELETE FROM `listeners` WHERE `listener_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from listeners")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for listeners")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q listenerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no listenerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from listeners")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for listeners")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ListenerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(listenerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listenerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `listeners` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, listenerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from listener slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for listeners")
	}

	if len(listenerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Listener) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindListener(ctx, exec, o.ListenerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ListenerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ListenerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listenerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `listeners`.* FROM `listeners` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, listenerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ListenerSlice")
	}

	*o = slice

	return nil
}

// ListenerExists checks if the Listener row exists.
func ListenerExists(ctx context.Context, exec boil.ContextExecutor, listenerID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `listeners` where `listener_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, listenerID)
	}
	row := exec.QueryRowContext(ctx, sql, listenerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if listeners exists")
	}

	return exists, nil
}
